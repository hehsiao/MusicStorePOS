
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.*; 
import java.sql.*;

public class DebugController implements ActionListener, ExceptionListener
{
	private AMSView AMS = null;
	private DebugModel debug = null;

	// constants used for describing the outcome of an operation
	public static final int OPERATIONSUCCESS = 0;
	public static final int OPERATIONFAILED = 1;
	public static final int VALIDATIONERROR = 2; 

	public DebugController(AMSView AMS)
	{
		this.AMS = AMS;
		debug = new DebugModel();

		// register to receive exception events from branch
		debug.addExceptionListener(this);
	}

	/*
	 * This event handler gets called when the user makes a menu
	 * item selection.
	 */ 
	public void actionPerformed(ActionEvent e)
	{
		String actionCommand = e.getActionCommand();

		if (actionCommand.equals("Register Account"))
		{
			RegisterAccountInsertDialog iDialog = new RegisterAccountInsertDialog(AMS);
			iDialog.pack();
			AMS.centerWindow(iDialog);
			iDialog.setVisible(true);
			return; 
		}
	}

	/*
	 * This event handler gets called when an exception event 
	 * is generated. It displays the exception message on the status 
	 * text area of the main GUI.
	 */ 
	public void exceptionGenerated(ExceptionEvent ex)
	{
		String message = ex.getMessage();

		// annoying beep sound
		Toolkit.getDefaultToolkit().beep();

		if (message != null)
		{	
			AMS.updateStatusBar(ex.getMessage());
		}
		else
		{
			AMS.updateStatusBar("An exception occurred!");
		}
	}    

	/*
	 * This class creates a dialog box for registering a debug account.
	 */
	class RegisterAccountInsertDialog extends JDialog implements ActionListener
	{
		private JTextField debugID = new JTextField(4);
		private JPasswordField debugPW = new JPasswordField(15);
		private JTextField debugName = new JTextField(10);
		private JTextField debugAddress = new JTextField(15);
		private JTextField debugPhone = new JTextField(10);

		/*
		 * Constructor. Creates the dialog's GUI.
		 */
		public RegisterAccountInsertDialog(JFrame parent)
		{
			super(parent, "Register Account", true);
			setResizable(false);

			JPanel contentPane = new JPanel(new BorderLayout());
			setContentPane(contentPane);
			contentPane.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

			// this panel will contain the text field labels and the text fields.
			JPanel inputPane = new JPanel();
			inputPane.setBorder(BorderFactory.createCompoundBorder(
					new TitledBorder(new EtchedBorder(), "Debug Account Registration"), 
					new EmptyBorder(5, 5, 5, 5)));

			// add the text field labels and text fields to inputPane
			// using the GridBag layout manager

			GridBagLayout gb = new GridBagLayout();
			GridBagConstraints c = new GridBagConstraints();
			inputPane.setLayout(gb);

			/** CUSTOMER ID **/
			// create and place debug id label
			JLabel label = new JLabel("Debug ID: ", SwingConstants.RIGHT);	    
			c.gridwidth = GridBagConstraints.RELATIVE;
			c.insets = new Insets(0, 0, 0, 5);
			c.anchor = GridBagConstraints.EAST;
			gb.setConstraints(label, c);
			inputPane.add(label);

			// place debug id field
			c.gridwidth = GridBagConstraints.REMAINDER;
			c.insets = new Insets(0, 0, 0, 0);
			c.anchor = GridBagConstraints.WEST;
			gb.setConstraints(debugID, c);
			inputPane.add(debugID);

			/** CUSTOMER PASSWORD **/
			// create and place debug password label
			label = new JLabel("Password: ", SwingConstants.RIGHT);
			c.gridwidth = GridBagConstraints.RELATIVE;
			c.insets = new Insets(5, 0, 0, 5);
			c.anchor = GridBagConstraints.EAST;
			gb.setConstraints(label, c);
			inputPane.add(label);

			// place debug password field
			c.gridwidth = GridBagConstraints.REMAINDER;
			c.insets = new Insets(5, 0, 0, 0);
			c.anchor = GridBagConstraints.WEST;
			gb.setConstraints(debugPW, c);
			inputPane.add(debugPW);

			/** CUSTOMER NAME **/
			// create and place debug name label
			label = new JLabel("Name: ", SwingConstants.RIGHT);
			c.gridwidth = GridBagConstraints.RELATIVE;
			c.insets = new Insets(5, 0, 0, 5);
			c.anchor = GridBagConstraints.EAST;
			gb.setConstraints(label, c);
			inputPane.add(label);

			// place debug name field
			c.gridwidth = GridBagConstraints.REMAINDER;
			c.insets = new Insets(5, 0, 0, 0);
			c.anchor = GridBagConstraints.WEST;
			gb.setConstraints(debugName, c);
			inputPane.add(debugName);

			// create and place debug address label
			label = new JLabel("Address: ", SwingConstants.RIGHT);
			c.gridwidth = GridBagConstraints.RELATIVE;
			c.insets = new Insets(5, 0, 0, 5);
			c.anchor = GridBagConstraints.EAST;
			gb.setConstraints(label, c);
			inputPane.add(label);

			// place debug address field
			c.gridwidth = GridBagConstraints.REMAINDER;
			c.insets = new Insets(5, 0, 0, 0);
			c.anchor = GridBagConstraints.WEST;
			gb.setConstraints(debugAddress, c);
			inputPane.add(debugAddress);

			// create and place debug phone label
			label = new JLabel("Phone Number: ", SwingConstants.RIGHT);
			c.gridwidth = GridBagConstraints.RELATIVE;
			c.insets = new Insets(5, 0, 0, 5);
			c.anchor = GridBagConstraints.EAST;
			gb.setConstraints(label, c);
			inputPane.add(label);

			// place debug phone field
			c.gridwidth = GridBagConstraints.REMAINDER;
			c.insets = new Insets(5, 0, 0, 0);
			c.anchor = GridBagConstraints.WEST;
			gb.setConstraints(debugPhone, c);
			inputPane.add(debugPhone);

			// when the return key is pressed in the last field
			// of this form, the action performed by the OK button
			// is executed
			debugPhone.addActionListener(this);
			debugPhone.setActionCommand("OK");

			// panel for the OK and cancel buttons
			JPanel buttonPane = new JPanel();
			buttonPane.setLayout(new BoxLayout(buttonPane, BoxLayout.X_AXIS));
			buttonPane.setBorder(BorderFactory.createEmptyBorder(10, 0, 0, 2));

			JButton OKButton = new JButton("OK");
			JButton cancelButton = new JButton("Cancel");
			OKButton.addActionListener(this);
			OKButton.setActionCommand("OK");
			cancelButton.addActionListener(new ActionListener()
			{
				public void actionPerformed(ActionEvent e)
				{
					dispose();
				}
			});

			// add the buttons to buttonPane
			buttonPane.add(Box.createHorizontalGlue());
			buttonPane.add(OKButton);
			buttonPane.add(Box.createRigidArea(new Dimension(10,0)));
			buttonPane.add(cancelButton);

			contentPane.add(inputPane, BorderLayout.CENTER);
			contentPane.add(buttonPane, BorderLayout.SOUTH);

			addWindowListener(new WindowAdapter() 
			{
				public void windowClosing(WindowEvent e)
				{
					dispose();
				}
			});
		}

		/*
		 * Event handler for the OK button in RegisterAccountInsertDialog
		 */ 
		public void actionPerformed(ActionEvent e)
		{
			String actionCommand = e.getActionCommand();

			if (actionCommand.equals("OK"))
			{
				if (validateInsert() != VALIDATIONERROR)
				{
					dispose();
				}
				else
				{
					Toolkit.getDefaultToolkit().beep();

					// display a popup to inform the user of the validation error
					JOptionPane errorPopup = new JOptionPane();
					errorPopup.showMessageDialog(this, "Invalid Input", "Error", JOptionPane.ERROR_MESSAGE);
				}	
			}
		}


		/*
		 * Validates the text fields in RegisterAccountInsertDialog and then
		 * calls debug.insertDebug() if the fields are valid.
		 * Returns the operation status, which is one of OPERATIONSUCCESS, 
		 * OPERATIONFAILED, VALIDATIONERROR.
		 */ 
		private int validateInsert()
		{
			try
			{
				Integer cid;
				String password;
				String name;
				String address;
				Integer phone;

				if (debugID.getText().trim().length() != 0)
				{
					cid = Integer.valueOf(debugID.getText().trim());

					// check for duplicates
					if (debug.findDebug(cid.intValue()))
					{
						Toolkit.getDefaultToolkit().beep();
						AMS.updateStatusBar("Debug " + cid.toString() + " already exists!");
						return OPERATIONFAILED; 
					}
				}
				else
				{
					return VALIDATIONERROR; 
				}

				if (debugPW.getText().trim().length() != 0)
				{
					password = debugPW.getText().trim();
				}
				else
				{
					return VALIDATIONERROR; 
				}

				if (debugName.getText().trim().length() != 0)
				{
					name = debugName.getText().trim();
				}
				else
				{
					return VALIDATIONERROR; 
				}

				if (debugAddress.getText().trim().length() != 0)
				{
					address = debugAddress.getText().trim();
				}
				else
				{
					address = null; 
				}

				if (debugPhone.getText().trim().length() != 0)
				{
					phone = Integer.valueOf(debugPhone.getText().trim());
				}
				else
				{
					phone = null; 
				}

				AMS.updateStatusBar("Creating Account...");

				if (debug.insertDebug(cid, password, name, address, phone))
				{
					AMS.updateStatusBar("Operation successful.");
					return OPERATIONSUCCESS; 
				}
				else
				{
					Toolkit.getDefaultToolkit().beep();
					AMS.updateStatusBar("Operation failed.");
					return OPERATIONFAILED; 
				}
			}
			catch (NumberFormatException ex)
			{
				// this exception is thrown when a string 
				// cannot be converted to a number
				return VALIDATIONERROR; 
			}
		}
	}
}
